<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.trip.base.mapper.StrategyCommentMapper">
  <resultMap id="BaseResultMap" type="cn.wolfcode.trip.base.domain.StrategyComment">
    <id column="id" property="id" />
    <!--<result column="user_id" property="user_id" />-->
    <result column="createTime" property="createTime" />
    <result column="content" property="content" />
    <result column="imgUrls" property="imgUrls" />
    <result column="starNum" property="starNum" />
    <!--<result column="strategy_id" property="strategy_id" />-->
    <result column="state" property="state" />
    <result column="commendTime" property="commendTime" />
    <association property="user" javaType="user" columnPrefix="u_">
      <id column="id" property="id" />
      <result column="headImgUrl" property="headImgUrl" />
      <result column="nickName" property="nickName" />
    </association>
    <association property="strategy" javaType="strategy" columnPrefix="s_">
      <id column="id" property="id" />
      <result column="title" property="title" />
      <result property="coverUrl" column="coverUrl"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey">
    delete from strategycomment
    where id = #{id}
  </delete>
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    insert into strategycomment (user_id, createTime, content, imgUrls, starNum, strategy_id,
      state, commendTime)
    values (#{user.id}, #{createTime}, #{content}, #{imgUrls}, #{starNum}, #{strategy.id},
      #{state}, #{commendTime})
  </insert>
  <insert id="insertRelation">
    insert into comment_tag (comment_id,tag_id)
    values (#{commentId}, #{tagId})
  </insert>
  <update id="updateByPrimaryKey">
    update strategycomment
    set user_id = #{user.id},
      createTime = #{createTime},
      content = #{content},
      imgUrls = #{imgUrls},
      starNum = #{starNum},
      strategy_id = #{strategy.id},
      state = #{state},
      commendTime = #{commendTime}
    where id = #{id}
  </update>
  <update id="changeState">
    update strategycomment
    set state = #{state}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap">
    select sc.id, sc.user_id, sc.createTime, sc.content, sc.imgUrls, sc.starNum, sc.strategy_id, sc.state, sc.commendTime,
        u.id u_id,u.nickName u_nickName,u.headImgUrl u_headImgUrl,
        s.id s_id,s.title s_title
    from strategycomment sc
     join user u on sc.user_id = u.id
     join strategy s on s.id = sc.strategy_id
    where sc.id = #{id}
  </select>


  <select id="selectAll" resultMap="BaseResultMap">
    select id, user_id, createTime, content, imgUrls, starNum, strategy_id, state, commendTime
    from strategycomment
  </select>
  <select id="selectForList" resultMap="BaseResultMap">
    select sc.id, sc.user_id, sc.createTime, sc.content, sc.imgUrls, sc.starNum, sc.strategy_id, sc.state, sc.commendTime,
    u.id u_id,u.nickName u_nickName,u.headImgUrl u_headImgUrl,s.id s_id,s.title s_title
    from strategycomment sc join user u on sc.user_id = u.id
    join strategy s on s.id = sc.strategy_id
    <where>
      <if test="strategyId != null">
        and  sc.strategy_id = #{strategyId}
      </if>
    </where>
  </select>
    <select id="selectByStatus" resultMap="BaseResultMap">
        select sc.id, sc.user_id, sc.createTime, sc.content, sc.imgUrls, sc.starNum, sc.strategy_id, sc.state,
        sc.commendTime,
        u.id u_id,u.nickName u_nickName,u.headImgUrl u_headImgUrl,s.id s_id,s.title s_title
        from strategycomment sc join user u on sc.user_id = u.id
        join strategy s on s.id = sc.strategy_id
        where sc.state = #{state}
    </select>
    <select id="selectFqueryStrategycommentsByUserIdorList" resultMap="BaseResultMap">
        select sc.id, sc.user_id, sc.createTime, sc.content, sc.imgUrls, sc.starNum, sc.strategy_id, sc.state, sc.commendTime,
        s.id s_id, s.title s_title , s.coverUrl s_coverUrl,
        u.id u_id,u.headImgUrl u_headImgUrl
        from strategycomment sc
        LEFT JOIN strategy s ON sc.strategy_id = s.id
        LEFT JOIN user u ON sc.user_id = u.id
        WHERE sc.user_id = #{UserId}
    </select>



  <insert id="insertLikeStrategyCommentUserRelation">
    INSERT INTO like_user_strategycomment (
    user_id,
    strategycomment_id,
    create_time
    ) VALUES (
    #{userId},
    #{strategycommentId},
    now()
    )
  </insert>


  <delete id="deleteLikeStrategyCommentUserRelation">
    DELETE FROM like_user_strategycomment
    WHERE user_id = #{userId} AND strategycomment_id = #{strategycommentId}
  </delete>


  <select id="countLikes" resultType="int">
    select count(1)
    from like_user_strategycomment
    WHERE  strategycomment_id = #{strategycommentId}
  </select>

  <select id="selectLikeById" resultType="map">
    select user_id, strategycomment_id, create_time
    from like_user_strategycomment
    WHERE user_id = #{userId} AND strategycomment_id = #{strategycommentId}

  </select>
</mapper>